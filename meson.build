project(
    'seispy',
    'c', 'cython',
    version : '0.0.1a0',
    license: 'MIT',
)

cc = meson.get_compiler('c')
cy = meson.get_compiler('cython')

py_mod = import('python')
py = py_mod.find_installation(pure: false)
py_dep = py.dependency()

m_dep = cc.find_library('m', required : false)
if m_dep.found()
  add_project_link_arguments('-lm', language : 'c')
endif

endianness = target_machine.endian()
if endianness == 'little'
    add_project_arguments('-DIS_LITTLE_ENDIAN', language : 'c')
elif endianness == 'big'
    add_project_arguments('-DIS_BIG_ENDIAN', language : 'c')
else
    error('Cannot determine target system endian')
endif

_global_c_args = cc.get_supported_arguments(
  '-Wno-unused-but-set-variable',
  '-Wno-unused-function',
  '-Wno-conversion',
  '-Wno-misleading-indentation',
)
add_project_arguments(_global_c_args, language : 'c')

# NumPy include directory
numpy_nodepr_api = ['-DNPY_NO_DEPRECATED_API=NPY_1_22_API_VERSION']
np_dep = dependency('numpy')

# Deal with M_PI & friends; add `use_math_defines` to c_args or cpp_args
# Cython doesn't always get this right itself (see, e.g., gh-16800), so
# explicitly add the define as a compiler flag for Cython-generated code.
is_windows = host_machine.system() == 'windows'
if is_windows
  use_math_defines = ['-D_USE_MATH_DEFINES']
else
  use_math_defines = []
endif

c_undefined_ok = ['-Wno-maybe-uninitialized']

cython_c_args = [numpy_nodepr_api, use_math_defines, '-DCYTHON_TRACE_NOGIL=1']

cython_args = []
if cy.version().version_compare('>=3.1.0')
  cython_args += ['-Xfreethreading_compatible=True']
endif


subdir('seispy')